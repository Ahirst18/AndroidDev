package com.example.bookspot;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;

import android.graphics.Color;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import com.samsung.android.sdk.iap.lib.constants.HelperDefine;
import com.samsung.android.sdk.iap.lib.helper.IapHelper;
import com.samsung.android.sdk.iap.lib.vo.OwnedProductVo;

import java.util.ArrayList;

public class MainActivity extends AppCompatActivity {

    Button buyBikeBtn, buyFuelBtn, buyBoosterBtn;
    TextView fuelCountTextView, boosterCountTextView;

    private IapHelper iapHelper;
    private int fuelCount = 0, boosterCount = 0;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        // Initialize IAP Helper and buttons
        iapHelper = IapHelper.getInstance(getApplicationContext());
        iapHelper.setOperationMode(HelperDefine.OperationMode.OPERATION_MODE_TEST);

        buyBikeBtn = findViewById(R.id.buyBikeId);
        buyFuelBtn = findViewById(R.id.buyFuelId);
        buyBoosterBtn = findViewById(R.id.buyWheelId);
        fuelCountTextView = findViewById(R.id.wheelCountTvId);
        boosterCountTextView = findViewById(R.id.fuelCountTvId);

        // Set onClick listeners
        buyBikeBtn.setOnClickListener(v -> handlePurchase("bike"));
        buyFuelBtn.setOnClickListener(v -> handlePurchase("fuel"));
        buyBoosterBtn.setOnClickListener(v -> handlePurchase("booster"));

        // Check if bike is purchased on app start
        checkIfBikePurchased();
    }

    // Check if the bike is already purchased and update button
    private void checkIfBikePurchased() {
        getOwnedList("bike", isOwned -> {
            if (isOwned) {
                updateBikeButtonStatus();
            }
        });
    }

    // Handle purchase and consumption logic
    private void handlePurchase(String itemId) {
        getOwnedList(itemId, isOwned -> {
            if (isOwned) {
                // Consume bike manually
                if ("bike".equals(itemId)) {
                    consumeItem(itemId);
                }
            } else {
                // Start purchase flow
                purchaseItem(itemId);
            }
        });
    }

    // Retrieve ownership status of a product
    private void getOwnedList(String purchaseID, OnCheckOwnershipCallback callback) {
        iapHelper.getOwnedList(IapHelper.PRODUCT_TYPE_ALL, (errorVo, ownedList) -> {
            if (errorVo.getErrorCode() == HelperDefine.IAP_ERROR_NONE) {
                for (OwnedProductVo ownedProduct : ownedList) {
                    if (ownedProduct.getPurchaseId().equals(purchaseID)) {
                        callback.onCheck(true); // Item is owned
                        return;
                    }
                }
                callback.onCheck(false); // Item is not owned
            } else {
                Toast.makeText(MainActivity.this, "Error: " + errorVo.getErrorString(), Toast.LENGTH_SHORT).show();
            }
        });
    }

    // Purchase an item
    private void purchaseItem(String itemId) {
        iapHelper.startPayment(itemId, "1", (errorVo, purchaseVo) -> {
            if (errorVo.getErrorCode() == HelperDefine.IAP_ERROR_NONE) {
                Toast.makeText(MainActivity.this, "Purchase successful!", Toast.LENGTH_SHORT).show();

                if ("fuel".equals(itemId)) {
                    fuelCount++;
                    fuelCountTextView.setText("Fuel Count: " + fuelCount);
                    consumeItem(itemId); // Auto consume fuel
                } else if ("booster".equals(itemId)) {
                    boosterCount += 2;
                    boosterCountTextView.setText("Booster Count: " + boosterCount);
                    consumeItem(itemId); // Auto consume booster
                } else if ("bike".equals(itemId)) {
                    consumeItem(itemId); // Manual consume for bike
                }
            } else {
                Toast.makeText(MainActivity.this, "Purchase failed: " + errorVo.getErrorString(), Toast.LENGTH_SHORT).show();
            }
        });
    }

    // Consume the item
    private void consumeItem(String sku) {
        iapHelper.consumePurchasedItems(sku, (errorVo, consumeList) -> {
            if (errorVo.getErrorCode() == HelperDefine.IAP_ERROR_NONE) {
                Toast.makeText(MainActivity.this, sku + " consumed!", Toast.LENGTH_SHORT).show();
                if ("bike".equals(sku)) {
                    updateBikeButtonStatus();
                }
            } else {
                Toast.makeText(MainActivity.this, "Consume failed: " + errorVo.getErrorString(), Toast.LENGTH_SHORT).show();
            }
        });
    }

    // Update the bike button to show "Consumed"
    private void updateBikeButtonStatus() {
        buyBikeBtn.setText("Consumed");
        buyBikeBtn.setBackgroundColor(Color.GRAY);
        buyBikeBtn.setEnabled(false);
    }

    // Interface for ownership callback
    interface OnCheckOwnershipCallback {
        void onCheck(boolean isOwned);
    }
}
