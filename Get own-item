Here is a step-by-step guide on how to retrieve user-owned items and handle consumable purchases using the Samsung In-App Purchase (IAP) API in Java. This guide assumes you've already integrated the Samsung IAP SDK into your app.

Step 1: Initialize the IAP SDK

First, ensure your app is integrated with the Samsung IAP SDK. The IapHelper class is often used to handle in-app purchases. You must initialize it in your activity.

public class MainActivity extends AppCompatActivity {

    private IapHelper iapHelper;
    private static final int IAP_REQUEST_CODE = 1;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        // Initialize the IAP Helper
        iapHelper = new IapHelper(this, IapHelper.IAP_MODE_PRODUCTION);
        iapHelper.bindIapService(new OnIapBindListener() {
            @Override
            public void onBindIapFinished(int resultCode) {
                if (resultCode == IapHelper.BINDING_RESPONSE_RESULT_OK) {
                    // IAP service is successfully bound
                    getUserOwnedItems();
                }
            }
        });
    }
}

Step 2: Get User-Owned Items

Once the IAP service is successfully bound, you can query the user-owned items. Use the getOwnedList() method to retrieve the list of purchased (owned) items.

public void getUserOwnedItems() {
    iapHelper.getOwnedList(IAP_REQUEST_CODE, IapHelper.ITEM_TYPE_ALL, new OnGetOwnedListListener() {
        @Override
        public void onGetOwnedList(int resultCode, OwnedProduct[] ownedProducts) {
            if (resultCode == IapHelper.IAP_RESPONSE_RESULT_OK) {
                // Successfully retrieved owned items
                for (OwnedProduct product : ownedProducts) {
                    String itemId = product.getItemId(); // Get the owned item ID
                    Log.d("IAP", "Owned item ID: " + itemId);
                    
                    // You can use this ID for consumable purchases
                    handleConsumablePurchase(itemId);
                }
            } else {
                // Handle error in retrieving owned items
                Log.e("IAP", "Failed to get owned items: " + resultCode);
            }
        }
    });
}

Step 3: Handle Consumable Purchase

Once you retrieve the owned items, you can process consumable items (items that can be repurchased after consumption). Use the startPurchase() method to initiate the purchase process for consumable items.

public void handleConsumablePurchase(String itemId) {
    // Initiate the purchase for consumable items
    iapHelper.startPurchase(IAP_REQUEST_CODE, itemId, IapHelper.ITEM_TYPE_CONSUMABLE, new OnPurchaseListener() {
        @Override
        public void onPurchaseFinished(int resultCode, Purchase purchase) {
            if (resultCode == IapHelper.IAP_RESPONSE_RESULT_OK) {
                // Purchase successful, handle granting the item to the user
                String purchaseId = purchase.getPurchaseId();
                String purchaseItemId = purchase.getItemId();
                Log.d("IAP", "Purchase successful. Item ID: " + purchaseItemId);
                // Grant the consumable item to the user here
            } else {
                // Handle purchase failure
                Log.e("IAP", "Purchase failed with code: " + resultCode);
            }
        }
    });
}

Step 4: Handle Activity Result

Make sure to override the onActivityResult method to handle the results of purchases and other IAP-related actions.

@Override
protected void onActivityResult(int requestCode, int resultCode, Intent data) {
    super.onActivityResult(requestCode, resultCode, data);
    if (requestCode == IAP_REQUEST_CODE) {
        iapHelper.handleActivityResult(requestCode, resultCode, data);
    }
}

Step 5: Clean Up IAP Service

Finally, unbind the IAP service when it's no longer needed to free up resources.

@Override
protected void onDestroy() {
    super.onDestroy();
    if (iapHelper != null) {
        iapHelper.dispose();
    }
}

Summary of Key Steps:

1. Initialize the IAP SDK in your activity.


2. Get user-owned items using getOwnedList() and process the items as needed.


3. Initiate consumable purchases using startPurchase().


4. Handle activity results for purchases and other IAP processes.


5. Unbind the IAP service when it's no longer needed.



This setup enables you to retrieve user-owned items and initiate consumable purchases via the Samsung IAP system. Be sure to handle errors and edge cases, such as service unavailability or network issues.

