public class MyActivity extends AppCompatActivity {

    private Button btn;
    private IapHelper iapHelper;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        // Initialize Button and IAP Helper
        btn = findViewById(R.id.btn_purchase);
        iapHelper = new IapHelper(this);  // Assuming IapHelper is your class to handle Samsung IAP

        // Set the button's onClick listener
        btn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                getOwnList();
            }
        });
    }

    // Function to retrieve the user's ownership list
    private void getOwnList() {
        iapHelper.getOwnList(new IapHelper.OwnListCallback() {
            @Override
            public void onOwnListReceived(List<String> ownList) {
                if (ownList.isEmpty()) {
                    // If ownList is empty, proceed to purchase
                    purchaseItem();
                } else {
                    // If user already owns the item, consume it
                    consumeItem(ownList.get(0));  // Assuming the first item in the list
                }
            }

            @Override
            public void onError(String error) {
                // Handle errors (e.g., network issues, failed request)
                Toast.makeText(MyActivity.this, "Error retrieving ownership list: " + error, Toast.LENGTH_SHORT).show();
            }
        });
    }

    // Function to initiate the purchase
    private void purchaseItem() {
        iapHelper.purchaseItem("item_sku", new IapHelper.PurchaseCallback() {
            @Override
            public void onPurchaseSuccess(String purchaseData) {
                Toast.makeText(MyActivity.this, "Purchase successful!", Toast.LENGTH_SHORT).show();
            }

            @Override
            public void onPurchaseFailed(String error) {
                Toast.makeText(MyActivity.this, "Purchase failed: " + error, Toast.LENGTH_SHORT).show();
            }
        });
    }

    // Function to consume the item
    private void consumeItem(String sku) {
        iapHelper.consumeItem(sku, new IapHelper.ConsumeCallback() {
            @Override
            public void onConsumeSuccess() {
                Toast.makeText(MyActivity.this, "Item consumed!", Toast.LENGTH_SHORT).show();
            }

            @Override
            public void onConsumeFailed(String error) {
                Toast.makeText(MyActivity.this, "Consume failed: " + error, Toast.LENGTH_SHORT).show();
            }
        });
    }
}
///////////////////////////////
add some features, if users  purchase bike they can consumed it, but on the other hand for fuel and boster if users purchase these items it will consumed automatically and inrease value like fuelCount = 1 , boosterCount = 2 , and show the value in the textView. 
package com.mhndroid.testproject;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;

import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import com.samsung.android.sdk.iap.lib.constants.HelperDefine;
import com.samsung.android.sdk.iap.lib.helper.IapHelper;
import com.samsung.android.sdk.iap.lib.listener.OnConsumePurchasedItemsListener;
import com.samsung.android.sdk.iap.lib.listener.OnGetOwnedListListener;
import com.samsung.android.sdk.iap.lib.listener.OnPaymentListener;
import com.samsung.android.sdk.iap.lib.vo.ConsumeVo;
import com.samsung.android.sdk.iap.lib.vo.ErrorVo;
import com.samsung.android.sdk.iap.lib.vo.OwnedProductVo;
import com.samsung.android.sdk.iap.lib.vo.PurchaseVo;

import java.util.ArrayList;

public class MainActivity extends AppCompatActivity implements View.OnClickListener {

    Button buyBikeBtn, buyFuelBtn, buyBoosterBtn;
    TextView fuelCountTextView, boosterCountTextView;
    
    private IapHelper iapHelper;
    private int fuelCount = 0;
    private int boosterCount = 0;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        // Initialize IAP Helper
        iapHelper = IapHelper.getInstance(getApplicationContext());
        iapHelper.setOperationMode(HelperDefine.OperationMode.OPERATION_MODE_TEST);

        // Initialize Buttons
        buyBikeBtn = findViewById(R.id.buyBikeId);
        buyFuelBtn = findViewById(R.id.buyFuelId);
        buyBoosterBtn = findViewById(R.id.buyWheelId);

        // Initialize TextViews for fuel and booster count display
        fuelCountTextView = findViewById(R.id.fuelCountTextView);
        boosterCountTextView = findViewById(R.id.boosterCountTextView);

        // Set OnClickListeners for each button
        buyBikeBtn.setOnClickListener(this);
        buyFuelBtn.setOnClickListener(this);
        buyBoosterBtn.setOnClickListener(this);
    }

    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.buyBikeId:
                getOwnList("bike");
                break;
            case R.id.buyFuelId:
                getOwnList("fuel");
                break;
            case R.id.buyWheelId:
                getOwnList("booster");
                break;
        }
    }

    // Function to retrieve the user's ownership list
    private void getOwnList(String purchaseID) {
        iapHelper.getOwnedList(IapHelper.PRODUCT_TYPE_ALL, new OnGetOwnedListListener() {
            @Override
            public void onGetOwnedProducts(@NonNull ErrorVo errorVo, @NonNull ArrayList<OwnedProductVo> ownedList) {
                if (errorVo.getErrorCode() == HelperDefine.IAP_ERROR_NONE) {
                    boolean isOwned = false;
                    for (OwnedProductVo ownedProduct : ownedList) {
                        if (ownedProduct.getPurchaseId().equals(purchaseID)) {
                            isOwned = true;
                            break;
                        }
                    }

                    if (isOwned) {
                        // Bike is owned, so consume it manually
                        if (purchaseID.equals("bike")) {
                            consumeItem(purchaseID);
                        }
                    } else {
                        // Purchase the item
                        purchaseItem(purchaseID);
                    }
                } else {
                    // Handle error
                    Toast.makeText(MainActivity.this, "Error retrieving owned list: " + errorVo.getErrorString(), Toast.LENGTH_SHORT).show();
                }
            }
        });
    }

    // Function to initiate the purchase
    private void purchaseItem(String purchaseID) {
        iapHelper.startPayment(purchaseID, "1", new OnPaymentListener() {
            @Override
            public void onPayment(@NonNull ErrorVo errorVo, @Nullable PurchaseVo purchaseVo) {
                if (errorVo.getErrorCode() == HelperDefine.IAP_ERROR_NONE) {
                    // Payment was successful
                    Toast.makeText(MainActivity.this, "Purchase successful!", Toast.LENGTH_SHORT).show();

                    // Automatically increase fuel and booster counts and display them
                    if (purchaseID.equals("fuel")) {
                        fuelCount += 1;
                        fuelCountTextView.setText("Fuel Count: " + fuelCount);
                    } else if (purchaseID.equals("booster")) {
                        boosterCount += 2;
                        boosterCountTextView.setText("Booster Count: " + boosterCount);
                    }

                    // For fuel and booster, consume immediately after purchase
                    if (!purchaseID.equals("bike")) {
                        consumeItem(purchaseID);
                    }

                } else {
                    // Handle payment error
                    Toast.makeText(MainActivity.this, "Purchase failed: " + errorVo.getErrorString(), Toast.LENGTH_SHORT).show();
                }
            }
        });
    }

    // Function to consume the item
    private void consumeItem(String sku) {
        ArrayList<String> itemsToConsume = new ArrayList<>();
        itemsToConsume.add(sku);
        iapHelper.consumePurchasedItems(itemsToConsume, new OnConsumePurchasedItemsListener() {
            @Override
            public void onConsumePurchasedItems(@NonNull ErrorVo errorVo, @NonNull ArrayList<ConsumeVo> consumeList) {
                if (errorVo.getErrorCode() == HelperDefine.IAP_ERROR_NONE) {
                    // Consumption was successful
                    Toast.makeText(MainActivity.this, "Item consumed!", Toast.LENGTH_SHORT).show();
                } else {
                    // Handle consumption error
                    Toast.makeText(MainActivity.this, "Consume failed: " + errorVo.getErrorString(), Toast.LENGTH_SHORT).show();
                }
            }
        });
    }
}
