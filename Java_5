If you want to implement the Firebase Cloud Functions using Java, here’s the complete process, from setting up your server-side logic with Java to handling Samsung IAP Instant Server Notification (ISN) on Firebase:

Step 1: Setting Up Your Firebase Project

1. Create a Firebase Project:

Visit Firebase Console and create a new project.



2. Enable Cloud Functions:

Navigate to your project’s dashboard and click on Functions in the left sidebar to enable it.




Step 2: Use Firebase Admin SDK with a Java Application

Firebase Cloud Functions don’t directly support Java at this time. However, you can set up your own server with Java using the Firebase Admin SDK to interact with Firebase services. Here's how to handle Samsung IAP ISN using Java:

Step 2.1: Setting Up a Java Web Server

You can use any Java framework like Spring Boot to handle the ISN from Samsung. Here’s how you can set it up:

1. Create a New Spring Boot Project:

Use Spring Initializr to create a new Spring Boot project with the following dependencies:

Spring Web

Firebase Admin SDK




2. Add Firebase Admin SDK Dependency to pom.xml:

<dependency>
    <groupId>com.google.firebase</groupId>
    <artifactId>firebase-admin</artifactId>
    <version>9.0.0</version>
</dependency>


3. Download the Firebase Admin SDK Private Key:

In your Firebase Console, navigate to Project Settings → Service Accounts → Generate New Private Key.

Download the JSON file and place it in your project’s resources directory.




Step 3: Implement the Java Server Code

3.1 Initialize Firebase Admin SDK in Java

Create a configuration class to initialize Firebase:

import com.google.auth.oauth2.GoogleCredentials;
import com.google.firebase.FirebaseApp;
import com.google.firebase.FirebaseOptions;
import org.springframework.context.annotation.Configuration;

import javax.annotation.PostConstruct;
import java.io.FileInputStream;
import java.io.IOException;

@Configuration
public class FirebaseConfig {

    @PostConstruct
    public void initialize() {
        try {
            FileInputStream serviceAccount = new FileInputStream("src/main/resources/firebase-adminsdk.json");

            FirebaseOptions options = FirebaseOptions.builder()
                    .setCredentials(GoogleCredentials.fromStream(serviceAccount))
                    .setDatabaseUrl("https://<your-project-id>.firebaseio.com")
                    .build();

            FirebaseApp.initializeApp(options);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

Replace "src/main/resources/firebase-adminsdk.json" with the actual path to your Firebase service account key.

3.2 Create a REST Controller to Handle ISN

Create a controller to handle POST requests from Samsung IAP:

import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.Map;

@RestController
@RequestMapping("/iap")
public class SamsungIapController {

    // Endpoint to handle Samsung IAP ISN
    @PostMapping("/isn")
    public ResponseEntity<String> handleISN(@RequestBody Map<String, Object> payload) {
        try {
            System.out.println("Received ISN payload: " + payload);

            // Extract relevant data
            String purchaseId = (String) payload.get("purchaseId");
            String status = (String) payload.get("status");
            String productId = (String) payload.get("productId");

            // Initialize Firebase Database Reference
            DatabaseReference databaseReference = FirebaseDatabase.getInstance().getReference();

            // Update the data in Firebase Realtime Database
            databaseReference.child("subscriptions").child(purchaseId).setValueAsync(payload);

            return ResponseEntity.status(HttpStatus.OK).body("ISN notification processed successfully.");
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Internal Server Error");
        }
    }
}

Step 4: Deploying Your Java Server

1. Run Your Spring Boot Application:

Start your Spring Boot application by running the main method in your Application.java class:

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class Application {
    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }
}



2. Expose Your Server:

If you are running your server locally, you can use tools like ngrok to expose your local server to the internet:

ngrok http 8080

This will provide you with a public URL (e.g., https://abcd1234.ngrok.io) to use for testing.




Step 5: Register Your Endpoint with Samsung IAP

1. Log in to the Samsung IAP Seller Portal.


2. Navigate to Monetization → In-App Purchase → Instant Server Notification.


3. Enter your endpoint URL (e.g., https://your-domain.com/iap/isn) or your ngrok URL (e.g., https://abcd1234.ngrok.io/iap/isn).



Step 6: Testing Your Setup

Use the Samsung IAP test environment to simulate purchases and check if your Firebase Database is updated correctly.

You can also manually test the endpoint using tools like Postman to send POST requests.


Note: Important Points

Security: Always validate incoming requests to ensure they are from Samsung and not spoofed. You can validate using a signature sent by Samsung with each request.

Firebase Database: You can choose to store data in Firebase Realtime Database or Firestore. Adjust the Firebase configuration and interaction code accordingly.


Summary

You have now set up a Java server using Spring Boot that listens for Samsung ISN notifications and updates the Firebase Realtime Database. This method effectively integrates Samsung IAP with Firebase while leveraging Java for server-side logic.

