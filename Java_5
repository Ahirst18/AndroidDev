I see! You’re referring to the Orders feature in Samsung IAP, which allows users and developers to view all payment and refund history. Here’s an explanation of Orders in the context of Samsung IAP and how it works:

What Are Orders in Samsung IAP?

In Samsung IAP, Orders refer to the historical records of all transactions made by a user within an app. This includes:

Payments: Purchases of in-app items, subscriptions, and any other transactions.

Refunds: Any refunds issued for purchases due to cancellations, revocations, or issues.


How the Orders Feature Works:

1. Order Record Creation:

Every time a user makes a purchase through Samsung IAP (whether it's a consumable, non-consumable, or subscription), an Order is created.

The Order contains key details like:

Order ID (unique identifier for the transaction)

Product ID (what was purchased)

Purchase date and time

Payment method (credit card, Samsung Pay, carrier billing, etc.)

Amount (price of the product)

Currency (e.g., USD, EUR)

Order status (Completed, Refunded, etc.)




2. Viewing Order History (For Users):

Users can view their purchase history from the Samsung IAP section in the app or through their Samsung Account.

They will see a list of all purchases they have made, along with any refunds or failed transactions.

Users can check the status of an order (e.g., "Completed", "Refunded", "Pending") to understand if the purchase was successful or if a refund was issued.



3. Order Retrieval (For Developers):

Developers can retrieve users' order history through the Samsung IAP API using the getPurchaseList API. This API returns a list of all completed purchases for the user.

For each order, developers receive information such as:

Order ID

Product ID

Purchase/Refund date

Transaction status (Completed, Cancelled, Refunded, etc.)


This information can be used to verify past purchases, deliver content, or handle customer support inquiries.



4. Handling Refunds:

If a user requests a refund, Samsung IAP processes the request, and the refund details are updated in the Orders history.

The status of the refunded order changes to "Refunded", and the amount is returned to the user.

Developers may need to revoke access to content (e.g., cancel a subscription or disable premium features) after a refund.



5. Order Status Types:

Completed: The purchase was successfully processed, and the item was delivered to the user.

Refunded: The user was refunded, and access to the purchased content may have been revoked.

Cancelled: The user or system canceled the purchase before completion.

Pending: The purchase is still being processed (e.g., awaiting payment confirmation).

Failed: The payment was unsuccessful due to issues with the user's payment method.




Developer Workflow for Viewing Order History:

1. Query Order List:

Use the getPurchaseList API to fetch all the user's purchases.

This API returns a JSON response with details for each order, including the order ID, status, and product information.



2. Filter by Status:

The developer can filter orders by status (e.g., Completed, Refunded) to get specific data on completed or refunded transactions.



3. Display Order History:

For users, the app can display this history in a dedicated section (e.g., "My Orders" or "Purchase History").

This gives users transparency into what they’ve purchased, what has been refunded, and any pending payments.




Key Points:

Order ID: This is the unique transaction identifier for each purchase.

Refund Handling: When a refund is processed, the order status updates accordingly.

Historical View: Both users and developers can access the complete payment and refund history.


This system ensures that both users and developers have a clear and organized view of every transaction, whether it’s a payment or a refund. Does this cover the functionality you were asking about? Let me know if anything is unclear!

