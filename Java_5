package com.example.bookspot;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;

import android.graphics.Color;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import com.samsung.android.sdk.iap.lib.constants.HelperDefine;
import com.samsung.android.sdk.iap.lib.helper.IapHelper;
import com.samsung.android.sdk.iap.lib.listener.OnConsumePurchasedItemsListener;
import com.samsung.android.sdk.iap.lib.listener.OnGetOwnedListListener;
import com.samsung.android.sdk.iap.lib.listener.OnPaymentListener;
import com.samsung.android.sdk.iap.lib.vo.ConsumeVo;
import com.samsung.android.sdk.iap.lib.vo.ErrorVo;
import com.samsung.android.sdk.iap.lib.vo.OwnedProductVo;
import com.samsung.android.sdk.iap.lib.vo.PurchaseVo;

import java.util.ArrayList;

public class MainActivity extends AppCompatActivity implements View.OnClickListener {

    Button buyBikeBtn, buyFuelBtn, buyBoosterBtn;
    TextView fuelCountTextView, boosterCountTextView;

    private IapHelper iapHelper;
    private int fuelCount = 0;
    private int boosterCount = 0;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        // Initialize IAP Helper
        iapHelper = IapHelper.getInstance(getApplicationContext());
        iapHelper.setOperationMode(HelperDefine.OperationMode.OPERATION_MODE_TEST);

        // Initialize Buttons
        buyBikeBtn = findViewById(R.id.buyBikeId);
        buyFuelBtn = findViewById(R.id.buyFuelId);
        buyBoosterBtn = findViewById(R.id.buyWheelId);

        // Initialize TextViews for fuel and booster count display
        fuelCountTextView = findViewById(R.id.wheelCountTvId);
        boosterCountTextView = findViewById(R.id.fuelCountTvId);

        // Set OnClickListeners for each button
        buyBikeBtn.setOnClickListener(this);
        buyFuelBtn.setOnClickListener(this);
        buyBoosterBtn.setOnClickListener(this);

        // Check if the bike has already been purchased and consumed
        checkBikePurchaseStatus();
    }

    @Override
    public void onClick(View v) {
        if(v.getId() == R.id.buyBikeId){
            getOwnList("Roboto");
        }else if (v.getId() == R.id.buyFuelId){
            getOwnList("Arial");
        }else if (v.getId() == R.id.buyWheelId){
            getOwnList("Arial");
        }
    }

    // Check if the bike has been purchased and update the button accordingly
    private void checkBikePurchaseStatus() {
        iapHelper.getOwnedList(IapHelper.PRODUCT_TYPE_ALL, new OnGetOwnedListListener() {
            @Override
            public void onGetOwnedProducts(@NonNull ErrorVo errorVo, @NonNull ArrayList<OwnedProductVo> ownedList) {
                if (errorVo.getErrorCode() == HelperDefine.IAP_ERROR_NONE) {
                    boolean isBikeOwned = false;
                    for (OwnedProductVo ownedProduct : ownedList) {
                        if (ownedProduct.getPurchaseId().equals("Roboto")) {
                            isBikeOwned = true;
                            break;
                        }
                    }

                    // If the bike is already owned, update the button
                    if (isBikeOwned) {
                        updateBikeButtonStatus();
                    }
                } else {
                    // Handle error
                    Toast.makeText(MainActivity.this, "Error retrieving owned list: " + errorVo.getErrorString(), Toast.LENGTH_SHORT).show();
                }
            }
        });
    }

    // Update the bike button status to show "Consumed" and change color
    private void updateBikeButtonStatus() {
        buyBikeBtn.setText("Consumed");
        buyBikeBtn.setBackgroundColor(Color.GRAY);
        buyBikeBtn.setEnabled(false);  // Disable the button since the bike is already consumed
    }

    // Function to retrieve the user's ownership list and decide to purchase or consume
    private void getOwnList(String purchaseID) {
        iapHelper.getOwnedList(IapHelper.PRODUCT_TYPE_ALL, new OnGetOwnedListListener() {
            @Override
            public void onGetOwnedProducts(@NonNull ErrorVo errorVo, @NonNull ArrayList<OwnedProductVo> ownedList) {
                if (errorVo.getErrorCode() == HelperDefine.IAP_ERROR_NONE) {
                    boolean isOwned = false;
                    for (OwnedProductVo ownedProduct : ownedList) {
                        if (ownedProduct.getPurchaseId().equals(purchaseID)) {
                            isOwned = true;
                            break;
                        }
                    }

                    if (isOwned) {
                        // Bike is owned, so consume it manually
                        if (purchaseID.equals("Roboto")) {
                            consumeItem(purchaseID);
                        }
                    } else {
                        // Purchase the item
                        purchaseItem(purchaseID);
                    }
                } else {
                    // Handle error
                    Toast.makeText(MainActivity.this, "Error retrieving owned list: " + errorVo.getErrorString(), Toast.LENGTH_SHORT).show();
                }
            }
        });
    }

    // Function to initiate the purchase
    private void purchaseItem(String purchaseID) {
        iapHelper.startPayment(purchaseID, "1", new OnPaymentListener() {
            @Override
            public void onPayment(@NonNull ErrorVo errorVo, @Nullable PurchaseVo purchaseVo) {
                if (errorVo.getErrorCode() == HelperDefine.IAP_ERROR_NONE) {
                    // Payment was successful
                    Toast.makeText(MainActivity.this, "Purchase successful!", Toast.LENGTH_SHORT).show();

                    // Automatically increase fuel and booster counts and display them
                    if (purchaseID.equals("Arial")) {
                        fuelCount += 1;
                        fuelCountTextView.setText("Fuel Count: " + fuelCount);
                    } else if (purchaseID.equals("booster")) {
                        boosterCount += 2;
                        boosterCountTextView.setText("Booster Count: " + boosterCount);
                    }

                    // For fuel and booster, consume immediately after purchase
                    if (!purchaseID.equals("Roboto")) {
                        consumeItem(purchaseID);
                    }

                } else {
                    // Handle payment error
                    Toast.makeText(MainActivity.this, "Purchase failed: " + errorVo.getErrorString(), Toast.LENGTH_SHORT).show();
                }
            }
        });
    }

    // Function to consume the item
    private void consumeItem(String sku) {
        ArrayList<String> itemsToConsume = new ArrayList<>();
        itemsToConsume.add(sku);
        iapHelper.consumePurchasedItems(String.valueOf(itemsToConsume), new OnConsumePurchasedItemsListener() {
            @Override
            public void onConsumePurchasedItems(@NonNull ErrorVo errorVo, @NonNull ArrayList<ConsumeVo> consumeList) {
                if (errorVo.getErrorCode() == HelperDefine.IAP_ERROR_NONE) {
                    // Consumption was successful
                    Toast.makeText(MainActivity.this, "Item consumed!", Toast.LENGTH_SHORT).show();
                    // Update bike button status if it was consumed
                    if (sku.equals("Roboto")) {
                        updateBikeButtonStatus();
                    }
                } else {
                    // Handle consumption error
                    Toast.makeText(MainActivity.this, "Consume failed: " + errorVo.getErrorString(), Toast.LENGTH_SHORT).show();
                }
            }
        });
    }
}
