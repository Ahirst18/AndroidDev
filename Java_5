To call the API using Retrofit in Android Studio and display the response in a `TextView`, follow these steps:

### Step 1: Add Retrofit Dependency
Add the Retrofit and GSON dependencies in your `build.gradle` file:
```gradle
implementation 'com.squareup.retrofit2:retrofit:2.9.0'
implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
```

### Step 2: Create API Interface
Create an interface that defines the API call.

```java
import retrofit2.Call;
import retrofit2.http.Body;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.POST;

public interface SamsungIAPService {

    @POST("iap/seller/orders")
    Call<IAPResponse> getOrders(
        @Header("Authorization") String token,
        @Header("service-account-id") String serviceAccountId,
        @Body IAPRequest request
    );
}
```

### Step 3: Create Request and Response Models

Define the request model (`IAPRequest`) and response model (`IAPResponse`) according to the API:

#### Request Model:
```java
public class IAPRequest {
    private String sellerSeq;
    private String packageName;
    private String requestDate;
    private String continuationToken;

    public IAPRequest(String sellerSeq, String packageName, String requestDate, String continuationToken) {
        this.sellerSeq = sellerSeq;
        this.packageName = packageName;
        this.requestDate = requestDate;
        this.continuationToken = continuationToken;
    }
}
```

#### Response Model:
Create the response model based on the API response structure:
```java
public class IAPResponse {
    // Define the fields based on the response you expect
    private String status;
    private String message;
    // Add other fields as necessary based on your API response structure

    // Getters and setters
    public String getStatus() {
        return status;
    }

    public String getMessage() {
        return message;
    }
}
```

### Step 4: Set Up Retrofit Client

```java
import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;

public class RetrofitClient {
    private static Retrofit retrofit = null;

    public static Retrofit getClient() {
        if (retrofit == null) {
            retrofit = new Retrofit.Builder()
                .baseUrl("https://devapi.samsungapps.com/")
                .addConverterFactory(GsonConverterFactory.create())
                .build();
        }
        return retrofit;
    }
}
```

### Step 5: Make the API Call in Your Activity

In your `Activity` or `Fragment`, you can now use Retrofit to make the API call and display the result in a `TextView`.

```java
import android.os.Bundle;
import android.widget.TextView;
import androidx.appcompat.app.AppCompatActivity;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

public class MainActivity extends AppCompatActivity {

    private TextView textViewResponse;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        textViewResponse = findViewById(R.id.textViewResponse);

        SamsungIAPService service = RetrofitClient.getClient().create(SamsungIAPService.class);

        // Create the request object
        IAPRequest request = new IAPRequest(
            "000123456789",
            "com.samsung.android.sample",
            "20230615",
            "e5ec039730164c50277f9a231b74c1b6e035d9184160d8b3d6b3de1f62691328fbe4c0c4863da52b3bcecef44a4c7acb974c674728c3cb173cb339bd41783f2c"
        );

        // Make the API call
        Call<IAPResponse> call = service.getOrders(
            "Bearer <your-access-token>",
            "<your-service-account-id>",
            request
        );

        call.enqueue(new Callback<IAPResponse>() {
            @Override
            public void onResponse(Call<IAPResponse> call, Response<IAPResponse> response) {
                if (response.isSuccessful() && response.body() != null) {
                    IAPResponse iapResponse = response.body();
                    // Display the response in the TextView
                    textViewResponse.setText("Status: " + iapResponse.getStatus() + "\nMessage: " + iapResponse.getMessage());
                } else {
                    textViewResponse.setText("Request failed: " + response.code());
                }
            }

            @Override
            public void onFailure(Call<IAPResponse> call, Throwable t) {
                textViewResponse.setText("Error: " + t.getMessage());
            }
        });
    }
}
```

### Step 6: Layout XML (`activity_main.xml`)

Create a simple layout with a `TextView` to show the response:

```xml
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp">

    <TextView
        android:id="@+id/textViewResponse"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Waiting for response..."
        android:textSize="16sp"/>
</LinearLayout>
```

### Explanation:
1. **Retrofit Interface**: Defines the POST request for retrieving orders from Samsung IAP.
2. **Request Model**: Contains the body data required for the POST request.
3. **Response Model**: Maps the JSON response from the API.
4. **Retrofit Client**: Configures Retrofit with a base URL and JSON converter.
5. **MainActivity**: Makes the API request and displays the response in a `TextView`.
